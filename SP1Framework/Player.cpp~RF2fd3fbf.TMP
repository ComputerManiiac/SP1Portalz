#include "Player.h"
#include "Manager.h"



Player::Player()
{
}

Player::Player(Manager *m, COORD position, int width, int height, int horizSpeed, double gravity, int jumpPower)
	: GameObject("Player", position, width, height, -1, { "" }) {

	/* Initialise Player's Component
	-> Render: Called every render()
	-> 

	*/
	RenderComponent *r = new RenderComponent(this);
	addComponent(r, COMP_RENDERABLE);
	m->addComponentToCategory(r, COMP_RENDERABLE);

	angle = -1;
	// Initialise Player Variables
	this->horizontalSpeed = horizSpeed;
	this->gravity = gravity;
	this->jumpPower = jumpPower;
	startPortal = -1;

	// Populate Player's Graphics [TEMP]
	std::vector<Graphics> temp;
	for (int y = 0; y < height; y++) {
		for (int x = 0; x < width; x++) {
			Graphics g = { ' ', 0 };
			g.colour = manager->interpretColour(BLUE, WHITE);

			temp.push_back(g);
		}
		r->addToGraphics(y, temp);
		temp.clear();
	}
}


Player::~Player()
{
}


SHORT Player::getHorizontalSpeed() {
	return this->horizontalSpeed;
}


double Player::getGravity() {
	return this->gravity;
}

int Player::getJumpPower() {
	return this->jumpPower;
}

bool Player::isOnGround() {
	return this->onGround;
}

void Player::setOnGround(bool ground) {
	this->onGround = ground;
}
bool Player::isJumping() {
	return this->jumping;
}

void Player::setIsJumping(bool jumping) {
	this->jumping = jumping;
}

double Player::getJumpTime() {
	return this->jumpTime;
}

int Player::getAngle() {
	return this->angle;
}


/*

UPDATE EVENT
-> This event is called every update() loop in game.cpp

Player's Update Event includes:
-> Moving in each direction
-> Gravity Pull

*/

void Player::update() {
	manager = Manager::getInstance();
	onMove();
	onShoot();
	onShootHit();

}

void Player::onShootHit() {
	if (!shootAnimation) return;

	if (shootPathCurrentBlock < (int)(shootPoints.size() - 1)) {
		shootPathCurrentBlock++;
	} else {
		GameObject *obj = manager->spawnNewGameObject("Portal", shootPoints[shootPathCurrentBlock], 2, 4, { std::to_string(angle) });
		Portal* portal = dynamic_cast<Portal*>(obj);
		setPortalDirection(portal);

		if (numOfPortals == 3) {
			numOfPortals = 2;

			int endPortal = 1 - startPortal;

			portals[startPortal]->destroy();
			portals[startPortal] = portal;

			portals[startPortal]->setPair(portals[endPortal]);
			portals[endPortal]->setPair(portals[startPortal]);

			startPortal = endPortal;

		} else {

			if (numOfPortals == 2) {
				portals[0]->setPair(portal);
				portal->setPair(portals[0]);
				portals[1] = portal;
				startPortal = 0;
			}
			portals[numOfPortals - 1] = portal;
		}

		shootAnimation = false;
	}
}

void Player::draw() {
	
	if (shootAnimation)
		manager->getConsole()->writeToBuffer(shootPoints[shootPathCurrentBlock], " ", manager->interpretColour(RED, WHITE));

}

std::vector<COORD>* Player::getShootPoints() {
	return &(this->shootPoints);
}

void Player::onShoot() {
	if (manager->getTimer(TIMER_SHOOT) > manager->getTimer(TIMER_ELAPSED)) return;
	if (GetConsoleWindow() != GetForegroundWindow()) return;

	if (manager->checkKeyPressed(K_LBUTTON)) {
		COORD mouse = manager->getConsole()->getMouseXY();
		if (mouse.X < 0 || mouse.X > 120 || mouse.Y < 0 || mouse.Y > 50) return;
		COORD player = getPosition();
		shootPoints.clear();
		shootPoints = line(player, calculateEndPoint(player,mouse));
		COORD portal;
		int id = -1;
		for (int i = 0; i < (int) shootPoints.size(); i++) {
			GameObject *w = manager->placeMeeting(shootPoints[i], "Wall");
			if (w != NULL) {
				portal = shootPoints[i-1];
				id = i;
				break;
			}
		}
		if (id != -1) {
			shootPoints.erase(shootPoints.begin() + id, shootPoints.end());
			optimiseShootPoints();
			shootPathCurrentBlock = 0;
			shootAnimation = true;
			numOfPortals++;
		}
		manager->setTimer(TIMER_SHOOT, manager->getTimer(TIMER_ELAPSED) + 0.2);
	}


}


void Player::setPortalDirection(Portal *portal) {

	COORD pos = portal->getPosition();
	SHORT rightX = pos.X + portal->getWidth() - 1;
	SHORT bottomY = pos.Y + portal->getHeight() - 1;
	
	if (manager->placeMeeting({ rightX + 1, pos.Y }, "Wall")) {
		portal->setDirection(PORTAL_LEFT);
	}
	else if (manager->placeMeeting({ pos.X - 1, pos.Y }, "Wall")) {
		portal->setDirection(PORTAL_RIGHT);
	}
	else if (manager->placeMeeting({ pos.X, pos.Y - 1 }, "Wall")) {
		portal->setDirection(PORTAL_BOTTOM);
	}
	else if (manager->placeMeeting({ pos.X, pos.Y + 1 }, "Wall")) {
		portal->setDirection(PORTAL_TOP);
	}
	


}

void Player::onTeleport(Portal *portal) {
	setPosition(portal->teleport());
	justTeleported = true;
}

void Player::onMoveLeft() {
	COORD coord = getPosition();
	SHORT bottomY = coord.Y + getHeight() - 1;
	SHORT projectedX = coord.X - getHorizontalSpeed();
	if (numOfPortals == 2 && manager->placeMeeting({ coord.X - 1, coord.Y }, "Portal")) {
		Portal* portal = dynamic_cast<Portal*>(manager->placeMeeting({ coord.X - 1 , coord.Y }, "Portal"));
		onTeleport(portal);
	}
	else {
		if (!manager->placeMeeting({ coord.X - 1, coord.Y }, "")
			&& !manager->placeMeeting({ coord.X - 1, bottomY }, "")) {

			setPosition(moveToDestnSmooth(coord, { projectedX, coord.Y }));
		}
	}

}

void Player::onMoveRight() {
	COORD coord = getPosition();
	SHORT bottomY = coord.Y + getHeight() - 1;
	SHORT rightX = coord.X + getWidth() - 1;
	if (numOfPortals == 2 && manager->placeMeeting({ rightX + 1, coord.Y }, "Portal")) {
		Portal* portal = dynamic_cast<Portal*>(manager->placeMeeting({ rightX + 1, coord.Y }, "Portal"));
		onTeleport(portal);
	}
	else {
		SHORT sWidth = (SHORT)getWidth();
		if (!manager->placeMeeting({ coord.X + sWidth,coord.Y }, "")
			&& !manager->placeMeeting({ coord.X + sWidth, bottomY }, "")) {

			SHORT projectedX = rightX + getHorizontalSpeed();
			COORD destn = moveToDestnSmooth({ rightX,coord.Y }, { projectedX,coord.Y });
			destn.X -= sWidth;
			destn.X += 1;
			setPosition(destn);
		}
	}
}


void Player::onMove() {

	COORD coord = getPosition();
	COORD leftBottom = coord;
	leftBottom.Y += (SHORT)getHeight();
	COORD rightBottom = leftBottom;
	rightBottom.X += (SHORT)(getWidth() - 1);

	/* Gravity and onGround Checks*/

	if (numOfPortals == 2 && !justTeleported && manager->placeMeeting(leftBottom, "Portal")) {
		Portal* portal = dynamic_cast<Portal*>(manager->placeMeeting(leftBottom, "Portal"));
		onTeleport(portal);
		
	} else {
		GameObject* leftBottomObj = manager->placeMeeting(leftBottom, "");
		GameObject* rightBottomObj = manager->placeMeeting(rightBottom, "");
		setOnGround((leftBottomObj != NULL) || (rightBottomObj != NULL));

		if (!isOnGround()) {
			/* Gravity */
			double amt = getGravity() * manager->getTimer(TIMER_DELTA) * 20.0;
			manager->setTimer(TIMER_GRAVITY, manager->getTimer(TIMER_GRAVITY) + amt);
			if (manager->getTimer(TIMER_GRAVITY) >= 1.0) {
				coord.Y++;
				manager->setTimer(TIMER_GRAVITY, manager->getTimer(TIMER_GRAVITY) - 1.0);
			}
			setPosition(coord);
		} else {
			/* Jumping */
			if (!isJumping() && (manager->checkKeyPressed(K_UP) || manager->checkKeyPressed(K_W)) && manager->getTimer(TIMER_JUMP) >= 0.30) {
				justTeleported = false;
				coord.Y -= getJumpPower();
				manager->setTimer(TIMER_JUMP, 0);
				setPosition(coord);
			} else {
				setIsJumping(false);
			}

		}
	}


	/* Left and Right Movement Checks */
	coord = getPosition();
	SHORT rightX = coord.X + getWidth() - 1;
	SHORT bottomY = coord.Y + getHeight() - 1;


	if (manager->checkKeyPressed(K_LEFT) || manager->checkKeyPressed(K_A)) {
		SHORT direction = 1;
		if (justTeleported) {
			if ((portals[0]->getDirection() == PORTAL_LEFT || portals[0]->getDirection() == PORTAL_RIGHT) &&
				(portals[0]->getDirection() == portals[1]->getDirection())) {
				onMoveRight();
			}
		}
		else {
			onMoveLeft();
		}

	}else if (manager->checkKeyPressed(K_RIGHT) || manager->checkKeyPressed(K_D)) {

		if (justTeleported) {
			if ((portals[0]->getDirection() == PORTAL_LEFT || portals[0]->getDirection() == PORTAL_RIGHT) &&
				(portals[0]->getDirection() == portals[1]->getDirection())) {
				onMoveLeft();
			}
		}
		else {
			onMoveRight();
		}
		

	} else {
		velocityX = 0;
	}


	if (justTeleported && ((!manager->checkKeyPressed(K_LEFT) && !manager->checkKeyPressed(K_A)) 
		|| (!manager->checkKeyPressed(K_RIGHT) && !manager->checkKeyPressed(K_D)))) {
		justTeleported = false;
	}

}

COORD Player::moveToDestnSmooth(COORD start, COORD destination) {

	GameObject *checkWall = manager->placeMeeting(destination, "");
	COORD bottom = destination;
	bottom.Y += getHeight() - 1;
	GameObject *checkWall2 = manager->placeMeeting(bottom, "");

	COORD finalCoords = start;
	if (checkWall == NULL && checkWall2 == NULL) {
		finalCoords = destination;
	} else {
		SHORT dir = (destination.X - start.X > 0) ? 1 : -1;
		COORD top = start;
		top.X+=dir;
		checkWall = manager->placeMeeting(top, "");
		bottom.X = top.X;
		checkWall2 = manager->placeMeeting(bottom, "");
		while (checkWall == NULL && checkWall2 == NULL) {
			finalCoords.X+= dir;
			top.X+= dir;
			bottom.X+= dir;
			checkWall = manager->placeMeeting(top, "");
			checkWall2 = manager->placeMeeting(bottom, "");
		}
	}
	return finalCoords;
}

void Player::optimiseShootPoints() {
	int size = (int) shootPoints.size();
	std::vector<COORD> optimised;

	int increment = size / 4;
	if (increment == 0) increment = 1;
	for (int i = 0; i < size; i+= increment) {
		optimised.push_back(shootPoints[i]);
	}
	COORD final;
	COORD lastPointLeft = shootPoints[size - 1];
	COORD lastPointRight = lastPointLeft;
	lastPointRight.X++;
	if (manager->placeMeeting(lastPointRight, "Wall")) {
		lastPointLeft.X--;
		final = lastPointLeft;
	} else if (manager->placeMeeting(lastPointLeft, "Wall")) {
		lastPointLeft.X++;
		final = lastPointLeft;
	}
	optimised.push_back(lastPointLeft);
	shootPoints = optimised;
}


int Player::sign(int dxy)
{
	if (dxy<0) return -1;
	else if (dxy>0) return 1;
	else return 0;
}

COORD Player::calculateEndPoint(COORD one, COORD two) {

	int x1 = (int)one.X;
	int y1 = (int)one.Y;
	int x2 = (int)two.X;
	int y2 = (int)two.Y;


	if (x1 == x2 && abs(y2-y1) > 0)
		return two;

	int x3 = 100;

	if (x2 - x1 < 0) x3 = -1;

	double gradient = ((double)(y2 - y1)) / ((double)(x2 - x1));
	double yintercept = (y1 - gradient * x1);
	int y3 = (int)((gradient * x3) + yintercept);
	return{ (SHORT)x3,(SHORT)y3 };
}

std::vector<COORD> Player::line(COORD one, COORD two) {

	std::vector<COORD> list;
	int x1 = (int)one.X;
	int y1 = (int)one.Y;
	int x2 = (int)two.X;
	int y2 = (int)two.Y;

	int diffY = abs(y2 - y1);



	int dX = x2 - x1;
	int dY = y2 - y1;

	//# Increments
	int sX = sign(dX);
	int sY = sign(dY);

	//# Segment length
	dX = abs(dX);
	dY = abs(dY);
	int maxD = max(dX, dY);

	//# Initial remainder
	double r = maxD / 2;

	int x = x1;
	int y = y1;

	if (dX > dY){
		//# Main loop
		for (int i = 0; i< maxD; i++) {
			if (x >= 0 && x <= 120 && y >= 0 && y <= 50)
				list.push_back({ (SHORT)x, (SHORT)y });
			//# Update (X, Y) and R
			x += sX;
			r += dY; // Horizontal Movement
			if (r >= dX)
			{
				y += sY;
				r -= dX; // Diagonal Movement
			}
		}
	} else {
		for (int i = 0; i< maxD; i++) {
			if (x >= 0 && x <= 120 && y >= 0 && y <= 50)
				list.push_back({ (SHORT)x, (SHORT)y });
			//# Update (X, Y) and R
			y += sY;
			r += dX; // Horizontal Movement
			if (r >= dY)
			{
				x += sX;
				r -= dY; // Diagonal Movement
			}
		}
	}
	return list;
}